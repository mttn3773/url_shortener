{"version":3,"sources":["store/actions/auth.actions.ts","utils/checkUnauthorizedError.ts","store/actions/notify.actions.ts","hooks/useApi.ts","components/Navigation.tsx","components/Notify.tsx","components/InputField.tsx","utils/toUpperCase.ts","pages/CreateLinkPage.tsx","pages/LinkDetails.tsx","utils/toErrorMap.ts","components/UserForm.tsx","config/config.ts","pages/LoginPage.tsx","components/LinksList.tsx","pages/ProfilePage.tsx","pages/RegisterPage.tsx","pages/routes.tsx","hooks/useAuth.ts","App.tsx","reportWebVitals.ts","store/reducers/index.ts","store/reducers/notify.reducer.ts","store/reducers/auth.reducer.ts","store/index.ts","index.tsx"],"names":["setUser","payload","type","checkUnauthorizedError","errors","dispatch","map","error","param","setNotify","useApi","useDispatch","useState","loading","setLoading","clearErrors","request","a","url","method","body","headers","jsonBody","JSON","stringify","fetch","credentials","response","json","res","message","msg","dispatchError","e","Navigation","user","useSelector","state","authReducer","toast","useToast","links","gridGap","justifyItems","mx","color","to","_hover","onClick","then","title","description","status","duration","isClosable","window","location","reload","position","top","bgColor","h","alignItems","Notify","notifyReducer","useEffect","length","isOpen","onClose","background","display","textAlign","padding","isIndeterminate","margin","size","InputField","text","withLabel","props","useField","field","id","name","toUpperCase","slice","component","className","CreateLinkPage","success","setSuccess","initialValues","onSubmit","values","errros","isSubmitting","w","my","direction","colorScheme","disabled","LinkDetails","linkId","useParams","link","setLink","onDelete","setOnDelete","handleDelete","as","href","from","target","Date","created_at","toLocaleDateString","clicks","_id","toErrorMap","mappedErrors","UserForm","onSuccessMessage","exact","email","password","setSubmitting","setErrors","m","border","borderRadius","mb","transition","minW","dotenv","config","server","serverUrl","process","SERVER_URL","api","endpoints","register","login","LoginPage","marginBottom","LinksList","index","ProfilePage","console","log","setLinks","RegisterPage","Routes","isUndefined","undefined","isLogged","setIsLogged","useAuth","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","allReducers","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e08f1879.chunk.js","sourcesContent":["import { IAuthState, IAuthPayload } from \"../../interface/authGlobal.interface\";\r\nimport { IAuthAction } from \"../reducers/auth.reducer\";\r\nexport const setUser = (payload: IAuthPayload): IAuthAction => {\r\n  return {\r\n    type: \"SET_USER\",\r\n    payload,\r\n  };\r\n};\r\n","import { IError } from \"./../interface/errors.interface\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { setUser } from \"../store/actions/auth.actions\";\r\nexport const checkUnauthorizedError = (\r\n  errors: IError[],\r\n  dispatch: Dispatch<any>\r\n) => {\r\n  errors.map((error) => {\r\n    if (error.param === \"authentication\") {\r\n      dispatch(setUser({}));\r\n    }\r\n  });\r\n};\r\n","import { INotifyPayload } from \"../../interface/notifyGlobal.interface\";\r\nimport { INotifyAction } from \"../reducers/notify.reducer\";\r\nexport const setNotify = (payload: INotifyPayload): INotifyAction => {\r\n  return {\r\n    type: \"SET_NOTIFY\",\r\n    payload,\r\n  };\r\n};\r\n","import { checkUnauthorizedError } from \"./../utils/checkUnauthorizedError\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setNotify } from \"../store/actions/notify.actions\";\r\nimport { IError } from \"./../interface/errors.interface\";\r\ninterface IRequestParams {\r\n  url: string;\r\n  method: string;\r\n  body?: any;\r\n  headers?: any;\r\n}\r\n\r\nexport const useApi = () => {\r\n  const dispatch = useDispatch();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const request = async ({ url, method, body, headers }: IRequestParams) => {\r\n    try {\r\n      headers[\"Accept\"] = \"application/json, text/plain, */*\";\r\n      headers[\"Content-Type\"] = \"application/json\";\r\n      const jsonBody = JSON.stringify(body);\r\n      setLoading(true);\r\n      dispatch(setNotify({ loading: true }));\r\n      const response: any = await fetch(url, {\r\n        method,\r\n        headers,\r\n        credentials: \"include\",\r\n        body: jsonBody,\r\n      });\r\n      const res = await response.json();\r\n      if (res.errors) {\r\n        checkUnauthorizedError([res.errors], dispatch);\r\n        dispatch(setNotify({ errors: res.errors, loading: false }));\r\n        return res;\r\n      }\r\n      dispatch(setNotify({ loading: false }));\r\n      setLoading(false);\r\n      return res;\r\n    } catch (e) {\r\n      checkUnauthorizedError([e], dispatch);\r\n      dispatch(\r\n        setNotify({\r\n          errors: e.message || \"Something went wrong\",\r\n          loading: false,\r\n        })\r\n      );\r\n      setLoading(false);\r\n      dispatch(setNotify({ loading: false }));\r\n      return {\r\n        errors: [{ msg: e.message || \"Something went wrong\" }],\r\n      };\r\n    }\r\n  };\r\n  const dispatchError = (e: IError) => {\r\n    dispatch(\r\n      setNotify({\r\n        errors: [{ msg: e.msg || \"Something went wrong\" }],\r\n      })\r\n    );\r\n  };\r\n\r\n  const clearErrors = () => {\r\n    dispatch(\r\n      setNotify({\r\n        errors: [],\r\n      })\r\n    );\r\n  };\r\n  return { loading, clearErrors, request, dispatchError };\r\n};\r\n","import { Flex, Text, useToast } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link, Router } from \"react-router-dom\";\r\nimport { useApi } from \"../hooks/useApi\";\r\nimport { IRootState } from \"../interface/rootState.interface\";\r\n\r\ninterface NavigationProps {}\r\nexport const Navigation: React.FC<NavigationProps> = ({}) => {\r\n  const user = useSelector((state: IRootState) => state.authReducer.user);\r\n  const { request, dispatchError } = useApi();\r\n  const toast = useToast();\r\n  let links = null;\r\n  const handleLogout = () => {\r\n    request({\r\n      url: \"/api/user/logout\",\r\n      method: \"POST\",\r\n      headers: {},\r\n    }).then(\r\n      (res) => {\r\n        toast({\r\n          title: \"Success!\",\r\n          description: res.message,\r\n          status: \"success\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n        return window.location.reload();\r\n      },\r\n      (e) => {\r\n        dispatchError(e);\r\n        return window.location.reload();\r\n      }\r\n    );\r\n  };\r\n  if (user) {\r\n    links = (\r\n      <Flex gridGap=\"3rem\" justifyItems=\"center\" mx=\"auto\" color=\"gray.100\">\r\n        <Link to=\"/create\">\r\n          <Text _hover={{ color: \"gray.300\" }}>CREATE LINK </Text>\r\n        </Link>\r\n        <Link to=\"#\" onClick={handleLogout}>\r\n          <Text _hover={{ color: \"gray.300\" }}> LOGOUT</Text>\r\n        </Link>\r\n      </Flex>\r\n    );\r\n  }\r\n  return (\r\n    <Flex position=\"sticky\" top=\"0\" bgColor=\"#333\" h=\"60px\" alignItems=\"center\">\r\n      <Text color=\"gray.100\" mx=\"3rem\">\r\n        <Link to=\"/\">URL-shortener</Link>\r\n      </Text>\r\n      {links}\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  useToast,\r\n  useModal,\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  CircularProgress,\r\n  Flex,\r\n} from \"@chakra-ui/react\";\r\nimport { load } from \"dotenv/types\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useApi } from \"../hooks/useApi\";\r\nimport { IRootState } from \"../interface/rootState.interface\";\r\n\r\ninterface NotifyProps {}\r\n\r\nexport const Notify: React.FC<NotifyProps> = ({}) => {\r\n  const { clearErrors } = useApi();\r\n  const errors = useSelector((state: IRootState) => state.notifyReducer.errors);\r\n  const loading = useSelector(\r\n    (state: IRootState) => state.notifyReducer.loading\r\n  );\r\n  const toast = useToast();\r\n  useEffect(() => {\r\n    if (!errors || !errors.length) return;\r\n    let message: string;\r\n    if (!errors[0]) message = (errors as any).msg || \"Something went wrong\";\r\n    else message = errors[0].msg || \"Something went wrong\";\r\n    toast({\r\n      title: \"Error\",\r\n      description: message || \"Something went wrong\",\r\n      status: \"error\",\r\n      duration: 3000,\r\n      isClosable: true,\r\n    });\r\n    clearErrors();\r\n  }, [errors]);\r\n  return (\r\n    <Modal isOpen={loading} onClose={() => {}}>\r\n      <ModalOverlay />\r\n      <ModalContent background=\"rgba(0, 0, 0, 0.5)\">\r\n        <ModalBody\r\n          display=\"flex\"\r\n          textAlign=\"center\"\r\n          justifyItems=\"center\"\r\n          padding=\"5rem 5rem\"\r\n        >\r\n          <CircularProgress\r\n            isIndeterminate\r\n            margin=\"auto\"\r\n            size=\"60px\"\r\n            color=\"green.300\"\r\n          />\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { FormControl, FormLabel, Input } from \"@chakra-ui/react\";\r\nimport { ErrorMessage, useField } from \"formik\";\r\nimport React, { InputHTMLAttributes } from \"react\";\r\nimport { toCapitalize } from \"../utils/toUpperCase\";\r\n\r\ntype InputFieldProps = InputHTMLAttributes<\r\n  HTMLInputElement | HTMLTextAreaElement\r\n> & {\r\n  type: string;\r\n  withLabel?: boolean;\r\n};\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({\r\n  type,\r\n  withLabel = true,\r\n  ...props\r\n}) => {\r\n  const [field, { error }] = useField(props as any);\r\n  return (\r\n    <FormControl id={field.name}>\r\n      {withLabel && <FormLabel>{toCapitalize(field.name)}</FormLabel>}\r\n      <ErrorMessage name={field.name} component=\"div\" className=\"error-text\" />\r\n      <Input {...field} type={type} />\r\n    </FormControl>\r\n  );\r\n};\r\n","export const toCapitalize = (text: string) => {\r\n  return text[0].toUpperCase() + text.slice(1);\r\n};\r\n","import { Button, Flex, useToast } from \"@chakra-ui/react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { InputField } from \"../components/InputField\";\r\nimport { useApi } from \"../hooks/useApi\";\r\n\r\ninterface CreateLinkPageProps {}\r\n\r\nexport const CreateLinkPage: React.FC<CreateLinkPageProps> = ({}) => {\r\n  const { request, dispatchError } = useApi();\r\n  const [success, setSuccess] = useState<boolean>(false);\r\n  const toast = useToast();\r\n  if (success) return <Redirect to=\"/\" />;\r\n  return (\r\n    <Formik\r\n      initialValues={{ to: \"\" }}\r\n      onSubmit={async (values) => {\r\n        const res = await request({\r\n          url: \"/api/link/generate\",\r\n          method: \"POST\",\r\n          headers: {},\r\n          body: values,\r\n        });\r\n        if (res.errors) return dispatchError(res.errros);\r\n        toast({\r\n          title: \"Success!\",\r\n          description: \"Link added\",\r\n          status: \"success\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n        return setSuccess(true);\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form>\r\n          <Flex\r\n            w=\"50%\"\r\n            mx=\"auto\"\r\n            my=\"4rem\"\r\n            direction=\"column\"\r\n            gridGap=\"3rem\"\r\n            alignItems=\"center\"\r\n          >\r\n            <InputField type=\"to\" name=\"to\" withLabel={false} />\r\n            <Button\r\n              w=\"10%\"\r\n              colorScheme=\"blue\"\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n            >\r\n              ADD\r\n            </Button>\r\n          </Flex>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n","import { Box, Flex, Link, Text } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { useApi } from \"../hooks/useApi\";\r\nimport { ILink } from \"../interface/link.interface\";\r\ninterface LinkDetailsProps {}\r\n\r\nexport const LinkDetails: React.FC<LinkDetailsProps> = ({}) => {\r\n  const linkId = useParams<{ id: string }>().id;\r\n  const { request, dispatchError } = useApi();\r\n  const [link, setLink] = useState<ILink>();\r\n  const [onDelete, setOnDelete] = useState<boolean>(false);\r\n  const handleDelete = async (id: ILink[\"_id\"]) => {\r\n    const res = await request({\r\n      url: `/api/link/${id}`,\r\n      method: \"DELETE\",\r\n      headers: {},\r\n    });\r\n    if (!res.errors) {\r\n      setOnDelete(true);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (!linkId) {\r\n      return;\r\n    }\r\n    request({\r\n      url: `/api/link/${linkId}`,\r\n      method: \"GET\",\r\n      headers: {},\r\n    }).then(\r\n      (res) => setLink(res.link),\r\n      (e) => dispatchError(e)\r\n    );\r\n  }, [linkId]);\r\n  if (onDelete) return <Redirect to=\"/\" />;\r\n  if (!link) return <Text>Loading...</Text>;\r\n  return (\r\n    <Flex\r\n      direction=\"column\"\r\n      mx=\"auto\"\r\n      w=\"50%\"\r\n      my=\"5rem\"\r\n      alignItems=\"center\"\r\n      gridGap=\"2rem\"\r\n    >\r\n      <Text as=\"b\">\r\n        From:{\" \"}\r\n        <a href={link.from} target=\"_blank\">\r\n          {link.from}\r\n        </a>\r\n      </Text>\r\n\r\n      <Text> To: {link.to}</Text>\r\n      <Text>Created At: {new Date(link.created_at).toLocaleDateString()}</Text>\r\n      <Text> Clicks: {link.clicks}</Text>\r\n      <a href={link.from}>Re</a>\r\n      <Text as=\"a\" onClick={() => handleDelete(link._id)}>\r\n        Delete\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n","import { IError } from \"../interface/errors.interface\";\r\n\r\ninterface IValidationError {\r\n  value: string;\r\n  msg: string;\r\n  param: string;\r\n  location: string;\r\n}\r\n\r\nexport const toErrorMap = (errors: {\r\n  errors: IError[];\r\n}): Record<string, string> => {\r\n  const mappedErrors: Record<string, string> = {};\r\n\r\n  errors.errors.map((error) => {\r\n    if (error.param) mappedErrors[error.param] = error.msg;\r\n  });\r\n\r\n  return mappedErrors;\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Flex,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useApi } from \"../hooks/useApi\";\r\nimport { IRootState } from \"../interface/rootState.interface\";\r\nimport { setUser } from \"../store/actions/auth.actions\";\r\nimport { toErrorMap } from \"../utils/toErrorMap\";\r\nimport { InputField } from \"./InputField\";\r\n\r\ninterface UserFormProps {\r\n  url: string;\r\n  onSuccessMessage: string;\r\n}\r\nexport const UserForm: React.FC<UserFormProps> = ({\r\n  url,\r\n  onSuccessMessage,\r\n}) => {\r\n  const { request } = useApi();\r\n  const [success, setSuccess] = useState<boolean>();\r\n  const dispatch = useDispatch();\r\n  const { loading } = useSelector((state: IRootState) => state.notifyReducer);\r\n  const toast = useToast();\r\n  if (success) {\r\n    return <Redirect to=\"/\" exact />;\r\n  }\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ email: \"\", password: \"\" }}\r\n        onSubmit={async (values, { setSubmitting, setErrors }) => {\r\n          const res = await request({\r\n            url,\r\n            method: \"POST\",\r\n            body: values,\r\n            headers: {},\r\n          });\r\n          if (res.errors) {\r\n            const mappedErrors = toErrorMap({ errors: res.errors });\r\n            setErrors(mappedErrors);\r\n            return;\r\n          }\r\n          if (res.user) {\r\n            dispatch(setUser({ user: res.user }));\r\n            toast({\r\n              title: \"Success!\",\r\n              description: onSuccessMessage,\r\n              status: \"success\",\r\n              duration: 3000,\r\n              isClosable: true,\r\n            });\r\n            return setSuccess(true);\r\n          }\r\n          return;\r\n        }}\r\n      >\r\n        {({ isSubmitting, errors }) => (\r\n          <Form>\r\n            <Flex\r\n              w=\"50%\"\r\n              m=\"auto\"\r\n              border={`2px solid ${\r\n                errors.email || errors.password ? \"tomato\" : \"green\"\r\n              }`}\r\n              borderRadius=\"5px\"\r\n              padding=\"2rem 3rem\"\r\n              justifyItems=\"center\"\r\n              direction=\"column\"\r\n            >\r\n              <Box w=\"65%\" m=\"auto\" mb=\"2rem\">\r\n                <InputField type=\"email\" name=\"email\" />\r\n              </Box>\r\n              <Box w=\"65%\" m=\"auto\" mb=\"2rem\">\r\n                <InputField type=\"password\" name=\"password\" />\r\n              </Box>\r\n              <Button\r\n                _hover={{\r\n                  color: \"black\",\r\n                  background: \"tomato\",\r\n                  transition: \"0.4s ease-in-out\",\r\n                }}\r\n                transition=\"0.4s ease-in-out\"\r\n                type=\"submit\"\r\n                margin=\"auto\"\r\n                colorScheme=\"blue\"\r\n                minW=\"5rem\"\r\n                disabled={loading || isSubmitting}\r\n              >\r\n                {loading || isSubmitting ? (\r\n                  <CircularProgress\r\n                    isIndeterminate\r\n                    size=\"20px\"\r\n                    color=\"green.300\"\r\n                  />\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </Button>\r\n            </Flex>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nconst SERVER_URL = process.env.SERVER_URL;\r\n\r\nconst ENDPOINTS = {\r\n  register: \"/api/user\",\r\n  login: \"/api/user/login\",\r\n};\r\n\r\nconst API = {\r\n  endpoints: ENDPOINTS,\r\n};\r\nconst SERVER = {\r\n  serverUrl: SERVER_URL,\r\n  api: API,\r\n};\r\n\r\nexport const config = {\r\n  server: SERVER,\r\n};\r\n","import { Box, Heading } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { UserForm } from \"../components/UserForm\";\r\nimport { config } from \"../config/config\";\r\ninterface LoginPageProps {}\r\n\r\nexport const LoginPage: React.FC<LoginPageProps> = ({}) => {\r\n  return (\r\n    <Box>\r\n      <Heading as=\"h1\" size=\"2xl\" textAlign=\"center\" marginBottom=\"3rem\">\r\n        Sign In\r\n      </Heading>\r\n      <UserForm\r\n        url={config.server.api.endpoints.login}\r\n        onSuccessMessage=\"Logged In Successefully\"\r\n      />\r\n      ;\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Table, Tbody, Td, Th, Thead, Tr } from \"@chakra-ui/react\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { ILink } from \"../interface/link.interface\";\r\n\r\ninterface LinksListProps {\r\n  links: ILink[];\r\n}\r\n\r\nexport const LinksList: React.FC<LinksListProps> = ({ links }) => {\r\n  if (!links.length) {\r\n    return <p> No links yet</p>;\r\n  }\r\n\r\n  return (\r\n    <Table m=\"auto\" w=\"75%\">\r\n      <Thead>\r\n        <Tr>\r\n          <Th> From </Th>\r\n          <Th> To </Th>\r\n          <Th> Created </Th>\r\n        </Tr>\r\n      </Thead>\r\n      <Tbody>\r\n        {links.map((link, index) => {\r\n          return (\r\n            <Tr key={index}>\r\n              <Td>\r\n                <Link to={`/details/${link._id}`}> {link.from} </Link>\r\n              </Td>\r\n              <Td>{link.to} </Td>\r\n              <Td>{new Date(link.created_at).toLocaleDateString()} </Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    </Table>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { LinksList } from \"../components/LinksList\";\r\nimport { config } from \"../config/config\";\r\nimport { useApi } from \"../hooks/useApi\";\r\nimport { ILink } from \"../interface/link.interface\";\r\nimport { IRootState } from \"../interface/rootState.interface\";\r\n\r\ninterface ProfilePageProps {}\r\n\r\nexport const ProfilePage: React.FC<ProfilePageProps> = ({}) => {\r\n  console.log(config.server.serverUrl);\r\n  const { request, dispatchError } = useApi();\r\n  const user = useSelector((state: IRootState) => state.authReducer.user);\r\n  const loading = useSelector(\r\n    (state: IRootState) => state.notifyReducer.loading\r\n  );\r\n  const [links, setLinks] = useState<ILink[]>([]);\r\n  useEffect(() => {\r\n    request({\r\n      url: \"/api/link\",\r\n      method: \"GET\",\r\n      headers: {},\r\n    }).then(\r\n      (res) => setLinks(res.links),\r\n      (e) => dispatchError(e)\r\n    );\r\n  }, []);\r\n  return (\r\n    <>\r\n      <LinksList links={links} />\r\n    </>\r\n  );\r\n};\r\n","import { Box, Heading } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { UserForm } from \"../components/UserForm\";\r\nimport { config } from \"../config/config\";\r\n\r\ninterface RegisterPageProps {}\r\n\r\nexport const RegisterPage: React.FC<RegisterPageProps> = ({}) => {\r\n  return (\r\n    <Box>\r\n      <Heading as=\"h1\" size=\"2xl\" textAlign=\"center\" marginBottom=\"3rem\">\r\n        Sign Up\r\n      </Heading>\r\n      <UserForm\r\n        url={config.server.api.endpoints.register}\r\n        onSuccessMessage=\"We've created account for you\"\r\n      />\r\n      ;\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { IRootState } from \"../interface/rootState.interface\";\r\nimport { CreateLinkPage } from \"./CreateLinkPage\";\r\nimport { LinkDetails } from \"./LinkDetails\";\r\nimport { LoginPage } from \"./LoginPage\";\r\nimport { ProfilePage } from \"./ProfilePage\";\r\nimport { RegisterPage } from \"./RegisterPage\";\r\n\r\ninterface routesProps {}\r\n\r\nexport const Routes: React.FC<routesProps> = ({}) => {\r\n  const isUndefined = typeof useAuth() === \"undefined\";\r\n  const isLogged = useSelector((state: IRootState) => state.authReducer.user);\r\n  if (isUndefined) {\r\n    return null;\r\n  }\r\n  if (isLogged) {\r\n    return (\r\n      <Switch>\r\n        <Route component={CreateLinkPage} path=\"/create\" exact />\r\n        <Route component={ProfilePage} path=\"/profile\" exact />\r\n        <Route component={LinkDetails} path={`/details/:id`} />\r\n        <Redirect to=\"/profile\" />\r\n      </Switch>\r\n    );\r\n  } else {\r\n    return (\r\n      <Switch>\r\n        <Route component={LoginPage} path=\"/login\" exact />\r\n        <Route component={RegisterPage} path=\"/register\" exact />\r\n        <Redirect to=\"/login\" />\r\n      </Switch>\r\n    );\r\n  }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IError } from \"../interface/errors.interface\";\r\nimport { IRootState } from \"../interface/rootState.interface\";\r\nimport { IUser } from \"../interface/user.interface\";\r\nimport { setUser } from \"../store/actions/auth.actions\";\r\nimport { setNotify } from \"../store/actions/notify.actions\";\r\nimport { useApi } from \"./useApi\";\r\n\r\nexport const useAuth = () => {\r\n  const { request, dispatchError } = useApi();\r\n  const user = useSelector((state: IRootState) => state.authReducer.user);\r\n  const [isLogged, setIsLogged] = useState<boolean | undefined>(undefined);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (user) {\r\n      return setIsLogged(true);\r\n    }\r\n    request({\r\n      url: \"/api/user/me\",\r\n      method: \"GET\",\r\n      headers: {},\r\n    }).then(\r\n      (res: { user?: IUser; error?: IError }) => {\r\n        if (res.error) {\r\n          return setIsLogged(false);\r\n        }\r\n\r\n        dispatch(setUser({ user: res.user }));\r\n        return setIsLogged(true);\r\n      },\r\n      (e) => {\r\n        setIsLogged(false);\r\n        dispatchError(e);\r\n      }\r\n    );\r\n  }, []);\r\n  return isLogged;\r\n};\r\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Navigation } from \"./components/Navigation\";\nimport { Notify } from \"./components/Notify\";\nimport { useAuth } from \"./hooks/useAuth\";\nimport { Routes } from \"./pages/routes\";\nimport \"./styles/App.scss\";\nimport { config } from \"./config/config\";\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        <Navigation />\n        <Notify />\n        <Routes />\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { authReducer } from \"./auth.reducer\";\r\nimport { notifyReducer } from \"./notify.reducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport const allReducers = combineReducers({\r\n  notifyReducer,\r\n  authReducer,\r\n});\r\n","import {\r\n  INotifyPayload,\r\n  INotifyState,\r\n} from \"../../interface/notifyGlobal.interface\";\r\n\r\nexport interface INotifyAction {\r\n  type: string;\r\n  payload: INotifyPayload;\r\n}\r\n\r\nexport const notifyReducer = (\r\n  state: INotifyState = { errors: [], loading: false },\r\n  action: INotifyAction\r\n): INotifyState => {\r\n  switch (action.type) {\r\n    case \"SET_NOTIFY\":\r\n      return { ...state, ...action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { IAuthPayload } from \"./../../interface/authGlobal.interface\";\r\nimport { IAuthState } from \"../../interface/authGlobal.interface\";\r\n\r\nexport interface IAuthAction {\r\n  type: string;\r\n  payload: IAuthPayload;\r\n}\r\n\r\nexport const authReducer = (\r\n  state: IAuthState = {},\r\n  action: IAuthAction\r\n): IAuthState => {\r\n  switch (action.type) {\r\n    case \"SET_USER\":\r\n      return { ...state, ...action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { allReducers } from \"./reducers/index\";\r\nimport { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nexport const store = createStore(allReducers, composeWithDevTools());\r\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}